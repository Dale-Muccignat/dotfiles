%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 21.07.0 (http://poppler.freedesktop.org)
%%Creator: Matplotlib v3.3.3, https://matplotlib.org
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 432 288
%%HiResBoundingBox: 0 0 432 288
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%BeginResource: font T3_14_0
8 dict begin
/FontType 3 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox [-1021 -463 1794 1233] def
/Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
/BuildGlyph {
  exch /CharProcs get exch
  2 copy known not { pop /.notdef } if
  get exec
} bind def
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
/CharProcs 28 dict def
CharProcs begin
/E {
632 0 98 0 568 729 setcachedevice
q
98 729 m
559 729 l
559 646 l
197 646 l
197 430 l
544 430 l
544 347 l
197 347 l
197 83 l
568 83 l
568 0 l
98 0 l
98 729 l
f
Q
} def
/I {
295 0 98 0 197 729 setcachedevice
q
98 0 99 729 re
f
Q
} def
/L {
557 0 98 0 552 729 setcachedevice
q
98 729 m
197 729 l
197 83 l
552 83 l
552 0 l
98 0 l
98 729 l
f
Q
} def
/V {
684 0 8 0 676 729 setcachedevice
q
286 0 m
8 729 l
111 729 l
342 115 l
573 729 l
676 729 l
398 0 l
286 0 l
f
Q
} def
/bracketleft {
390 0 86 -131 293 760 setcachedevice
q
86 760 m
293 760 l
293 690 l
176 690 l
176 -61 l
293 -61 l
293 -131 l
86 -131 l
86 760 l
f
Q
} def
/bracketright {
390 0 97 -131 304 760 setcachedevice
q
304 760 m
304 -131 l
97 -131 l
97 -61 l
214 -61 l
214 690 l
97 690 l
97 760 l
304 760 l
f
Q
} def
/c {
550 0 55 -13 488 560 setcachedevice
q
488 526 m
488 442 l
462 456 437 466 411 473 c
385 480 360 484 334 484 c
276 484 230 465 198 428 c
166 391 150 339 150 273 c
150 206 166 154 198 117 c
230 80 276 62 334 62 c
360 62 385 65 411 72 c
437 79 462 90 488 104 c
488 21 l
462 9 436 0 410 -5 c
383 -10 354 -13 324 -13 c
242 -13 176 12 128 64 c
79 115 55 185 55 273 c
55 362 79 432 128 483 c
177 534 244 560 330 560 c
358 560 385 557 411 551 c
437 545 463 537 488 526 c
f
Q
} def
/e {
615 0 55 -13 562 560 setcachedevice
q
562 296 m
562 252 l
149 252 l
153 190 171 142 205 110 c
238 78 284 62 344 62 c
378 62 412 66 444 74 c
476 82 509 95 541 113 c
541 28 l
509 14 476 3 442 -3 c
408 -9 373 -13 339 -13 c
251 -13 182 12 131 62 c
80 112 55 181 55 268 c
55 357 79 428 127 481 c
175 533 241 560 323 560 c
397 560 455 536 498 489 c
540 441 562 377 562 296 c
472 322 m
471 371 457 410 431 440 c
404 469 368 484 324 484 c
274 484 234 469 204 441 c
174 413 156 373 152 322 c
472 322 l
f
Q
} def
/five {
636 0 77 -13 549 729 setcachedevice
q
108 729 m
495 729 l
495 646 l
198 646 l
198 467 l
212 472 227 476 241 478 c
255 480 270 482 284 482 c
365 482 429 459 477 415 c
525 370 549 310 549 234 c
549 155 524 94 475 51 c
426 8 357 -13 269 -13 c
238 -13 207 -10 175 -6 c
143 -1 111 6 77 17 c
77 116 l
106 100 136 88 168 80 c
199 72 232 69 267 69 c
323 69 368 83 401 113 c
433 143 450 183 450 234 c
450 284 433 324 401 354 c
368 384 323 399 267 399 c
241 399 214 396 188 390 c
162 384 135 375 108 363 c
108 729 l
f
Q
} def
/four {
636 0 49 0 580 729 setcachedevice
q
378 643 m
129 254 l
378 254 l
378 643 l
352 729 m
476 729 l
476 254 l
580 254 l
580 172 l
476 172 l
476 0 l
378 0 l
378 172 l
49 172 l
49 267 l
352 729 l
f
Q
} def
/g {
635 0 55 -207 544 560 setcachedevice
q
454 280 m
454 344 440 395 414 431 c
387 467 349 485 301 485 c
253 485 215 467 188 431 c
161 395 148 344 148 280 c
148 215 161 165 188 129 c
215 93 253 75 301 75 c
349 75 387 93 414 129 c
440 165 454 215 454 280 c
544 68 m
544 -24 523 -93 482 -139 c
440 -184 377 -207 292 -207 c
260 -207 231 -204 203 -200 c
175 -195 147 -188 121 -178 c
121 -91 l
147 -105 173 -115 199 -122 c
225 -129 251 -133 278 -133 c
336 -133 380 -117 410 -87 c
439 -56 454 -10 454 52 c
454 96 l
435 64 411 40 382 24 c
353 8 319 0 279 0 c
211 0 157 25 116 76 c
75 127 55 195 55 280 c
55 364 75 432 116 483 c
157 534 211 560 279 560 c
319 560 353 552 382 536 c
411 520 435 496 454 464 c
454 547 l
544 547 l
544 68 l
f
Q
} def
/hyphen {
361 0 49 234 312 314 setcachedevice
q
49 234 263 80 re
f
Q
} def
/i {
278 0 94 0 184 760 setcachedevice
q
94 547 m
184 547 l
184 0 l
94 0 l
94 547 l
94 760 m
184 760 l
184 646 l
94 646 l
94 760 l
f
Q
} def
/l {
278 0 94 0 184 760 setcachedevice
q
94 0 90 760 re
f
Q
} def
/multiply {
838 0 137 31 701 596 setcachedevice
q
701 537 m
478 313 l
701 90 l
643 31 l
419 255 l
195 31 l
137 90 l
360 313 l
137 537 l
195 596 l
419 372 l
643 596 l
701 537 l
f
Q
} def
/n {
634 0 91 0 549 560 setcachedevice
q
549 330 m
549 0 l
459 0 l
459 327 l
459 379 448 417 428 443 c
408 469 378 482 338 482 c
289 482 251 466 223 435 c
195 404 181 362 181 309 c
181 0 l
91 0 l
91 547 l
181 547 l
181 462 l
202 494 227 519 257 535 c
286 551 320 560 358 560 c
420 560 468 540 500 501 c
532 462 549 405 549 330 c
f
Q
} def
/nine {
636 0 63 -13 566 742 setcachedevice
q
110 15 m
110 105 l
134 93 159 84 185 78 c
210 72 235 69 260 69 c
324 69 374 90 408 134 c
442 178 462 244 468 334 c
448 306 424 284 396 269 c
367 254 335 247 300 247 c
226 247 168 269 126 313 c
84 357 63 417 63 494 c
63 568 85 628 129 674 c
173 719 232 742 306 742 c
390 742 455 709 499 645 c
543 580 566 486 566 364 c
566 248 538 157 484 89 c
429 21 356 -13 264 -13 c
239 -13 214 -10 189 -6 c
163 -2 137 5 110 15 c
306 324 m
350 324 385 339 411 369 c
437 399 450 441 450 494 c
450 546 437 588 411 618 c
385 648 350 664 306 664 c
262 664 227 648 201 618 c
175 588 162 546 162 494 c
162 441 175 399 201 369 c
227 339 262 324 306 324 c
f
Q
} def
/o {
612 0 55 -13 557 560 setcachedevice
q
306 484 m
258 484 220 465 192 427 c
164 389 150 338 150 273 c
150 207 163 156 191 118 c
219 80 257 62 306 62 c
354 62 392 80 420 118 c
448 156 462 207 462 273 c
462 337 448 389 420 427 c
392 465 354 484 306 484 c
306 560 m
384 560 445 534 490 484 c
534 433 557 363 557 273 c
557 183 534 113 490 63 c
445 12 384 -13 306 -13 c
227 -13 165 12 121 63 c
77 113 55 183 55 273 c
55 363 77 433 121 484 c
165 534 227 560 306 560 c
f
Q
} def
/one {
636 0 110 0 544 729 setcachedevice
q
124 83 m
285 83 l
285 639 l
110 604 l
110 694 l
284 729 l
383 729 l
383 83 l
544 83 l
544 0 l
124 0 l
124 83 l
f
Q
} def
/percent {
950 0 55 -13 895 742 setcachedevice
q
727 321 m
699 321 676 309 660 285 c
644 261 636 227 636 184 c
636 142 644 108 660 84 c
676 60 699 48 727 48 c
755 48 777 60 793 84 c
809 108 817 142 817 184 c
817 226 809 260 793 284 c
777 308 755 321 727 321 c
727 383 m
778 383 819 365 849 329 c
879 293 895 244 895 184 c
895 123 879 75 849 40 c
819 4 778 -13 727 -13 c
675 -13 633 4 603 40 c
573 75 558 123 558 184 c
558 245 573 293 603 329 c
633 365 675 383 727 383 c
223 680 m
195 680 173 667 157 643 c
141 619 133 586 133 544 c
133 500 141 467 157 443 c
173 419 195 407 223 407 c
251 407 274 419 290 443 c
306 467 314 500 314 544 c
314 586 305 619 289 643 c
273 667 251 680 223 680 c
664 742 m
742 742 l
286 -13 l
208 -13 l
664 742 l
223 742 m
274 742 315 724 346 688 c
376 652 392 604 392 544 c
392 482 376 434 346 398 c
316 362 275 345 223 345 c
171 345 130 362 100 398 c
70 434 55 482 55 544 c
55 604 70 652 100 688 c
130 724 171 742 223 742 c
f
Q
} def
/r {
411 0 91 0 411 560 setcachedevice
q
411 463 m
401 469 390 473 378 476 c
366 478 353 480 339 480 c
288 480 249 463 222 430 c
194 397 181 350 181 288 c
181 0 l
91 0 l
91 547 l
181 547 l
181 462 l
199 495 224 520 254 536 c
284 552 321 560 365 560 c
371 560 378 559 386 559 c
393 558 401 557 411 555 c
411 463 l
f
Q
} def
/s {
521 0 54 -13 472 560 setcachedevice
q
443 531 m
443 446 l
417 458 391 468 364 475 c
336 481 308 485 279 485 c
234 485 200 478 178 464 c
156 450 145 430 145 403 c
145 382 153 366 169 354 c
185 342 217 330 265 320 c
296 313 l
360 299 405 279 432 255 c
458 230 472 195 472 151 c
472 100 452 60 412 31 c
372 1 316 -13 246 -13 c
216 -13 186 -10 154 -5 c
122 0 89 8 54 20 c
54 113 l
87 95 120 82 152 74 c
184 65 216 61 248 61 c
290 61 323 68 346 82 c
368 96 380 117 380 144 c
380 168 371 187 355 200 c
339 213 303 226 247 238 c
216 245 l
160 257 119 275 95 299 c
70 323 58 356 58 399 c
58 450 76 490 112 518 c
148 546 200 560 268 560 c
301 560 332 557 362 552 c
391 547 418 540 443 531 c
f
Q
} def
/space {
318 0 0 0 0 0 setcachedevice
q
Q
} def
/t {
392 0 27 0 368 702 setcachedevice
q
183 702 m
183 547 l
368 547 l
368 477 l
183 477 l
183 180 l
183 135 189 106 201 94 c
213 81 238 75 276 75 c
368 75 l
368 0 l
276 0 l
206 0 158 13 132 39 c
106 65 93 112 93 180 c
93 477 l
27 477 l
27 547 l
93 547 l
93 702 l
183 702 l
f
Q
} def
/three {
636 0 76 -13 556 742 setcachedevice
q
406 393 m
453 383 490 362 516 330 c
542 298 556 258 556 212 c
556 140 531 84 482 45 c
432 6 362 -13 271 -13 c
240 -13 208 -10 176 -4 c
144 1 110 10 76 22 c
76 117 l
103 101 133 89 166 81 c
198 73 232 69 268 69 c
330 69 377 81 409 105 c
441 129 458 165 458 212 c
458 254 443 288 413 312 c
383 336 341 349 287 349 c
202 349 l
202 430 l
291 430 l
339 430 376 439 402 459 c
428 478 441 506 441 543 c
441 580 427 609 401 629 c
374 649 336 659 287 659 c
260 659 231 656 200 650 c
169 644 135 635 98 623 c
98 711 l
135 721 170 729 203 734 c
235 739 266 742 296 742 c
370 742 429 725 473 691 c
517 657 539 611 539 553 c
539 513 527 479 504 451 c
481 423 448 403 406 393 c
f
Q
} def
/two {
636 0 73 0 536 742 setcachedevice
q
192 83 m
536 83 l
536 0 l
73 0 l
73 83 l
110 121 161 173 226 239 c
290 304 331 346 348 365 c
380 400 402 430 414 455 c
426 479 433 504 433 528 c
433 566 419 598 392 622 c
365 646 330 659 286 659 c
255 659 222 653 188 643 c
154 632 117 616 78 594 c
78 694 l
118 710 155 722 189 730 c
223 738 255 742 284 742 c
359 742 419 723 464 685 c
509 647 532 597 532 534 c
532 504 526 475 515 449 c
504 422 484 390 454 354 c
446 344 420 317 376 272 c
332 227 271 164 192 83 c
f
Q
} def
/y {
592 0 30 -207 562 547 setcachedevice
q
322 -50 m
296 -114 271 -157 247 -177 c
223 -197 191 -207 151 -207 c
79 -207 l
79 -132 l
132 -132 l
156 -132 175 -126 189 -114 c
203 -102 218 -75 235 -31 c
251 9 l
30 547 l
125 547 l
296 119 l
467 547 l
562 547 l
322 -50 l
f
Q
} def
/zero {
636 0 66 -13 570 742 setcachedevice
q
318 664 m
267 664 229 639 203 589 c
177 539 165 464 165 364 c
165 264 177 189 203 139 c
229 89 267 64 318 64 c
369 64 407 89 433 139 c
458 189 471 264 471 364 c
471 464 458 539 433 589 c
407 639 369 664 318 664 c
318 742 m
399 742 461 709 505 645 c
548 580 570 486 570 364 c
570 241 548 147 505 83 c
461 19 399 -13 318 -13 c
236 -13 173 19 130 83 c
87 147 66 241 66 364 c
66 486 87 580 130 645 c
173 709 236 742 318 742 c
f
Q
} def
end
currentdict end
/T3_14_0 exch definefont pop
%%EndResource
/F14_0 /T3_14_0 1 1
[ /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
  /parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
  /zero/one/two/three/four/five/six/seven
  /eight/nine/colon/semicolon/less/equal/greater/question
  /at/A/B/C/D/E/F/G
  /H/I/J/K/L/M/N/O
  /P/Q/R/S/T/U/V/W
  /X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
  /quoteleft/a/b/c/d/e/f/g
  /h/i/j/k/l/m/n/o
  /p/q/r/s/t/u/v/w
  /x/y/z/braceleft/bar/braceright/asciitilde/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/exclamdown/cent/sterling/fraction/yen/florin/section
  /currency/quotesingle/quotedblleft/guillemotleft/guilsinglleft/guilsinglright/fi/fl
  /.notdef/endash/dagger/daggerdbl/periodcentered/.notdef/paragraph/bullet
  /quotesinglbase/quotedblbase/quotedblright/guillemotright/ellipsis/perthousand/.notdef/questiondown
  /.notdef/grave/acute/circumflex/tilde/macron/breve/dotaccent
  /dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut/ogonek/caron
  /emdash/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/multiply
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/AE/.notdef/ordfeminine/.notdef/.notdef/.notdef/.notdef
  /Lslash/Oslash/OE/ordmasculine/.notdef/.notdef/.notdef/.notdef
  /.notdef/ae/.notdef/.notdef/.notdef/dotlessi/.notdef/.notdef
  /lslash/oslash/oe/germandbls/.notdef/.notdef/.notdef/.notdef]
pdfMakeFont
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 432 288 re
W
q
1 j
/DeviceGray {} cs
[1] sc
0 j
0 w
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[1] sc
0 0 432 288 re
f
74.831507 42.734646 354.333847 236.548007 re
f
q
74.831507 42.734646 354.333847 236.548007 re
W
1 j
1 w
/DeviceGray {} CS
[0] SC
/DeviceRGB {} cs
[0 0 0] sc
419.137038 52.153433 m
418.480305 51.086759 l
417.823571 50.513279 l
416.510105 50.289621 l
415.853372 50.364174 l
415.196639 50.197865 l
413.883172 50.432992 l
413.226439 50.32403 l
412.569706 50.398583 l
411.912972 50.301091 l
411.256239 50.553423 l
410.599506 50.541953 l
409.942773 50.943389 l
408.629306 51.138373 l
407.31584 51.746262 l
406.659107 52.531931 l
406.002373 53.518317 l
405.34564 55.324781 l
404.688907 59.161366 l
404.032174 72.242458 l
403.37544 272.587898 l
402.718707 128.73603 l
402.061974 49.532627 l
401.405241 49.475279 l
400.748507 49.532627 l
400.091774 49.458075 l
398.121575 49.578506 l
396.808108 49.538362 l
394.181175 49.498218 l
392.867709 49.515423 l
329.164585 49.544097 l
328.507852 49.630119 l
325.880919 49.561301 l
323.253986 49.635854 l
321.94052 49.59571 l
320.627053 49.647323 l
319.97032 49.59571 l
319.313587 49.693202 l
318.656854 49.612914 l
318.00012 49.72761 l
316.686654 49.687467 l
315.373188 49.687467 l
314.716454 49.618649 l
312.746255 49.687467 l
310.119322 49.664528 l
308.149122 49.88245 l
307.492389 49.710406 l
306.835656 49.784959 l
305.522189 49.704671 l
303.551989 49.773489 l
302.238523 49.75055 l
301.58179 49.865246 l
298.954857 49.773489 l
297.64139 49.934063 l
296.984657 49.88245 l
296.327924 49.985677 l
295.671191 49.911124 l
295.014457 50.04876 l
291.730791 50.094638 l
290.417325 50.232273 l
285.163459 50.559157 l
283.849993 51.109699 l
282.536526 51.189986 l
281.879793 51.20719 l
280.566326 51.929776 l
279.909593 51.786406 l
279.25286 52.159168 l
278.596127 52.979245 l
277.939393 53.415091 l
277.28266 54.90614 l
276.625927 55.95561 l
275.969194 58.398637 l
275.312461 62.940603 l
274.655727 69.495486 l
273.998994 78.917772 l
273.342261 91.041151 l
272.685528 98.570951 l
272.028794 96.133659 l
271.372061 87.049727 l
270.715328 72.884756 l
270.058595 61.260305 l
269.401861 54.005776 l
268.745128 50.834428 l
268.088395 49.767754 l
267.431662 49.475279 l
264.804729 49.429401 l
96.681022 49.475279 l
96.024289 49.675997 l
95.367555 50.392848 l
94.710822 51.952715 l
94.054089 55.760626 l
93.397356 63.410857 l
92.083889 81.79091 l
91.427156 85.317815 l
90.770423 82.312777 l
90.11369 74.582259 l
89.456956 64.20226 l
88.800223 56.517621 l
88.14349 51.95845 l
87.486757 50.226539 l
86.830024 49.612914 l
86.17329 49.45234 l
84.859824 49.429401 l
84.859824 49.429401 l
S
Q
q
/DeviceGray {} cs
[0] sc
1 j
0.5 w
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
91.427156 42.734646 m
91.427156 45.234646 l
f
91.427156 42.734646 m
91.427156 45.234646 l
S
1 w
q
[1 0 0 1 86.927156 28.594021] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0.609375 Td
/F14_0 14 Tf
(0)
[8.904
0] Tj
Q
0.5 w
157.100479 42.734646 m
157.100479 45.234646 l
f
157.100479 42.734646 m
157.100479 45.234646 l
S
1 w
q
[1 0 0 1 148.100479 28.594021] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0.609375 Td
/F14_0 14 Tf
(1)
[8.904
0] Tj
8.907227 0.609375 Td
(0)
[8.904
0] Tj
Q
0.5 w
222.773802 42.734646 m
222.773802 45.234646 l
f
222.773802 42.734646 m
222.773802 45.234646 l
S
1 w
q
[1 0 0 1 213.773802 28.594021] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0.609375 Td
/F14_0 14 Tf
(2)
[8.904
0] Tj
8.907227 0.609375 Td
(0)
[8.904
0] Tj
Q
0.5 w
288.447125 42.734646 m
288.447125 45.234646 l
f
288.447125 42.734646 m
288.447125 45.234646 l
S
1 w
q
[1 0 0 1 279.447125 28.594021] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0.609375 Td
/F14_0 14 Tf
(3)
[8.904
0] Tj
8.907227 0.609375 Td
(0)
[8.904
0] Tj
Q
0.5 w
354.120448 42.734646 m
354.120448 45.234646 l
f
354.120448 42.734646 m
354.120448 45.234646 l
S
1 w
q
[1 0 0 1 345.120448 28.594021] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0.609375 Td
/F14_0 14 Tf
(4)
[8.904
0] Tj
8.907227 0.609375 Td
(0)
[8.904
0] Tj
Q
0.5 w
419.793771 42.734646 m
419.793771 45.234646 l
f
419.793771 42.734646 m
419.793771 45.234646 l
S
1 w
q
[1 0 0 1 410.793771 28.594021] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0.609375 Td
/F14_0 14 Tf
(5)
[8.904
0] Tj
8.907227 0.609375 Td
(0)
[8.904
0] Tj
Q
[1 0 0 1 0 0] Tm
0 0 Td
130.115618 7.250271 Td
/F14_0 19 Tf
(Electron Energy Loss [eV])
[12.008
0
5.282
0
11.685
0
10.45
0
7.448
0
7.809
0
11.628
0
12.046
0
6.042
0
12.008
0
12.046
0
11.685
0
7.809
0
12.065
0
11.248
0
6.042
0
10.583
0
11.628
0
9.899
0
9.899
0
6.042
0
7.41
0
11.685
0
12.996
0
7.41
0] Tj
0.5 w
74.831507 49.429401 m
77.331507 49.429401 l
f
74.831507 49.429401 m
77.331507 49.429401 l
S
1 w
q
[1 0 0 1 62.331507 44.109088] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0.609375 Td
/F14_0 14 Tf
(0)
[8.904
0] Tj
Q
0.5 w
74.831507 106.777458 m
77.331507 106.777458 l
f
74.831507 106.777458 m
77.331507 106.777458 l
S
1 w
q
[1 0 0 1 25.331507 101.230583] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0.498438 Td
/F14_0 14 Tf
(1)
[8.904
0] Tj
8.907227 0.498438 Td
(\327)
[11.732
0] Tj
20.637695 0.498438 Td
(1)
[8.904
0] Tj
29.544922 0.498438 Td
(0)
[8.904
0] Tj
38.586133 5.857813 Td
/F14_0 9.8 Tf
(4)
[6.2328
0] Tj
Q
0.5 w
74.831507 164.125516 m
77.331507 164.125516 l
f
74.831507 164.125516 m
77.331507 164.125516 l
S
1 w
q
[1 0 0 1 25.331507 158.578641] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0.498438 Td
/F14_0 14 Tf
(2)
[8.904
0] Tj
8.907227 0.498438 Td
(\327)
[11.732
0] Tj
20.637695 0.498438 Td
(1)
[8.904
0] Tj
29.544922 0.498438 Td
(0)
[8.904
0] Tj
38.586133 5.857813 Td
/F14_0 9.8 Tf
(4)
[6.2328
0] Tj
Q
0.5 w
74.831507 221.473574 m
77.331507 221.473574 l
f
74.831507 221.473574 m
77.331507 221.473574 l
S
1 w
q
[1 0 0 1 25.331507 215.926699] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0.498438 Td
/F14_0 14 Tf
(3)
[8.904
0] Tj
8.907227 0.498438 Td
(\327)
[11.732
0] Tj
20.637695 0.498438 Td
(1)
[8.904
0] Tj
29.544922 0.498438 Td
(0)
[8.904
0] Tj
38.586133 5.857813 Td
/F14_0 9.8 Tf
(4)
[6.2328
0] Tj
Q
0.5 w
74.831507 278.821632 m
77.331507 278.821632 l
f
74.831507 278.821632 m
77.331507 278.821632 l
S
1 w
q
[1 0 0 1 25.331507 273.274757] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0.498438 Td
/F14_0 14 Tf
(4)
[8.904
0] Tj
8.907227 0.498438 Td
(\327)
[11.732
0] Tj
20.637695 0.498438 Td
(1)
[8.904
0] Tj
29.544922 0.498438 Td
(0)
[8.904
0] Tj
38.586133 5.857813 Td
/F14_0 9.8 Tf
(4)
[6.2328
0] Tj
Q
[1 0 0 1 0 0] Tm
0 0 Td
[0 1 -1 0 17.378382 119.641462] Tm
0 0 Td
0 0 Td
/F14_0 19 Tf
(Intensity)
[5.605
0
12.046
0
7.448
0
11.685
0
12.046
0
9.899
0
5.282
0
7.448
0
11.248
0] Tj
2 J
0 j
/DeviceRGB {} cs
[0 0 0] sc
74.831507 42.734646 m
74.831507 279.282653 l
S
0.8 w
429.165354 42.734646 m
429.165354 279.282653 l
S
1 w
74.831507 42.734646 m
429.165354 42.734646 l
S
0.8 w
74.831507 279.282653 m
429.165354 279.282653 l
S
0 J
/DeviceGray {} cs
[1] sc
1 w
/DeviceGray {} cs
[1] sc
81.831507 236.335778 128.865625 35.946875 re
f
81.831507 236.335778 128.865625 35.946875 re
S
1.75 w
/DeviceRGB {} cs
[0 0 0] sc
93.031507 255.342028 m
121.031507 255.342028 l
S
/DeviceGray {} cs
[0] sc
1 j
1 w
/DeviceGray {} cs
[0] sc
[1 0 0 1 0 0] Tm
0 0 Td
132.231507 250.442028 Td
/F14_0 14 Tf
(90%-10%)
[8.904
0
8.904
0
13.3
0
5.054
0
8.904
0
8.904
0
13.3
0] Tj
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%+ font T3_14_0
%%EOF
